# Basic Configuration
opt_in_rules:
- anyobject_protocol
- array_init
- attributes
- closure_end_indentation
- closure_spacing
- collection_alignment
- conditional_returns_on_newline
- contains_over_filter_count
- contains_over_filter_is_empty
- contains_over_first_not_nil
- contains_over_range_nil_comparison
- convenience_type
- empty_collection_literal
- empty_count
- empty_string
- empty_xctest_method
- explicit_init
- explicit_type_interface
- fallthrough
- fatal_error_message
- file_header
- file_name
- file_name_no_space
- first_where
- flatmap_over_map_reduce
- function_default_parameter_at_end
- identical_operands
- indentation_width
- joined_default_parameter
- last_where
- legacy_multiple
- legacy_random
- let_var_whitespace
- literal_expression_end_indentation
- lower_acl_than_parent
- missing_docs
- modifier_order
- multiline_arguments
- multiline_arguments_brackets
- multiline_literal_brackets
- multiline_parameters
- multiline_parameters_brackets
- nslocalizedstring_key
- number_separator
- object_literal
- operator_usage_whitespace
- optional_enum_case_matching
- overridden_super_call
- override_in_extension
- pattern_matching_keywords
- prefer_self_type_over_type_of_self
- private_action
- private_outlet
- prohibited_super_call
- reduce_into
- redundant_nil_coalescing
- single_test_class
- sorted_first_last
- sorted_imports
- static_operator
- strong_iboutlet
- switch_case_on_newline
- toggle_bool
- trailing_closure
- unneeded_parentheses_in_closure_argument
- untyped_error_in_catch
- unused_declaration
- unused_import
- vertical_parameter_alignment_on_call
- vertical_whitespace_closing_braces
- vertical_whitespace_opening_braces
- xct_specific_matcher
- yoda_condition
- force_try
- force_cast
- function_body_length
- implicit_getter
- duplicate_enum_cases
- prefer_zero_over_explicit_init
- reduce_boolean
- unused_enumerated
- type_contents_order

included:
- App/Sources
- Tests/Sources
- UITests/Sources

disabled_rules:
  - discarded_notification_center_observer
  - computed_accessors_order
  - inclusive_language
  - weak_delegate
  - force_unwrapping

# Rule Configurations
conditional_returns_on_newline:
  if_only: true

explicit_type_interface:
  allow_redundancy: true
  excluded:
    - local

identifier_name:
  max_length: 60
  excluded:
    - id
    - db
    - to

line_length: 180

vertical_whitespace_closing_braces:
  severity: error

vertical_whitespace_opening_braces:
  severity: error

private_action:
  severity: error

private_outlet:
  severity: error

overridden_super_call:
  severity: error

unused_import:
  severity: error

function_body_length:
  - 20 # warning
  - 21 # error

type_body_length:
  - 300 # warning
  - 400 # error

function_parameter_count:
  - 4 # warning
  - 5 # error

nesting:
  type_level: 4
  statement_level: 4

trailing_whitespace:
  ignores_comments: false

file_name:
  suffix_pattern: "Ext"

type_contents_order:
  order:
    - case
    - type_alias
    - associated_type
    - subtype
    - type_property
    - type_method
    - ib_inspectable
    - ib_outlet
    - instance_property
    - initializer
    - deinitializer
    - view_life_cycle_method
    - subscript
    - ib_action
    - other_method

warning_threshold: 5

# Custom Rules
# Source: https://github.com/JamitLabs/ProjLintTemplates/blob/master/JamitLabs/App/SwiftLint.stencil
custom_rules:
  class_name_suffix_collection_view_controller:
    included: ".*.swift"
    regex: 'class +\w+(?<!CollectionViewController) *(?:<[^>]+>)? *: +\w+CollectionViewController'
    name: "Class Name Suffix View Controller"
    message: "All `CollectionViewController` subclasses should end on `CollectionViewController`."
    severity: warning
  class_name_suffix_table_view_controller:
    included: ".*.swift"
    regex: 'class +\w+(?<!TableViewController) *(?:<[^>]+>)? *: +\w+TableViewController'
    name: "Class Name Suffix View Controller"
    message: "All `TableViewController` subclasses should end on `TableViewController`."
    severity: warning
  class_name_suffix_view_controller:
    included: ".*.swift"
    regex: 'class +\w+(?<!ViewController) *(?:<[^>]+>)? *: +\w+ViewController'
    name: "Class Name Suffix View Controller"
    message: "All `ViewController` subclasses should end on `ViewController`."
    severity: warning
  color_literal:
    included: ".*.swift"
    regex: '#colorLiteral\('
    name: "Color Literal"
    message: "Don't use color literals – use asset catalog and SwiftGen access instead."
    severity: warning
  dynamic_storyboard_reference:
    included: ".*.swift"
    regex: 'UIStoryboard\(\s*name:\s*\"'
    name: "Dynamic Storyboard Reference"
    message: "Don't use dynamic storyboard references – use SwiftGen & StoryboardScene instead."
    severity: warning
  dynamic_string_reference:
    included: ".*.swift"
    regex: 'NSLocalizedString\s*\('
    name: "Dynamic String Reference"
    message: "Don't use dynamic localization string references via code strings – use SwiftGen & L10n instead."
    severity: warning
  empty_init_body:
    included: ".*.swift"
    regex: 'init\([^\{\n]*\) \{\s+\}'
    name: "Empty Init Body"
    message: "Don't use whitespace or newlines for the body of empty initializers – use `init() {}` instead."
    severity: warning
  empty_method:
    included: ".*.swift"
    regex: 'func [^\s\(]+\([^\{\n]*\) \{\s*\}'
    name: "Empty Method"
    message: "Don't keep empty methods in code without commenting inside why they are needed or a `// TODO: not yet implemented`."
    severity: warning
  empty_type:
    included: ".*.swift"
    regex: '(?:class|protocol|struct|enum) [^\{]+\{\s*\}'
    name: "Empty Type"
    message: "Don't keep empty types in code without commenting inside why they are needed or a `// TODO: not yet implemented`."
    severity: warning
  if_as_guard:
    included: ".*.swift"
    regex: '(?<=\n) *if [^\{]+\{\s*return\s*(?:nil){0,1}([^a-zA-z\n]*)\n*\s*\}(?! *else)'
    name: "If as Guard"
    message: "Don't use an if statement to just return – use guard for such cases instead."
    severity: warning
  single_line_guard:
    included: ".*.swift"
    regex: 'guard[^\{]{2,80}else\s*\{\s*\n\s*return.{2,40}\}'
    name: "Single Line Guard"
    message: "Use a single line guard for simple checks."
    severity: warning
  singleton_default_private_init:
    included: ".*.swift"
    regex: 'class +(?<TYPE>\w+)(?:<[^\>]+>)? *\{.*static let `default`(?:: *\k<TYPE>)? *= *\k<TYPE>\(.*(?<=private) init\('
    name: "Singleton Default Private Init"
    message: "Singletons with a `default` object (pseudo-singletons) should not declare init methods as private."
    severity: warning
  singleton_shared_final:
    included: ".*.swift"
    regex: '(?<!final )class +(?<TYPE>\w+)(?:<[^\>]+>)? *\{.*static let shared(?:: *\k<TYPE>)? *= *\k<TYPE>\('
    name: "Singleton Shared Final"
    message: "Singletons with a single object (`shared`) should be marked as final."
    severity: warning
  singleton_shared_private_init:
    included: ".*.swift"
    regex: 'class +(?<TYPE>\w+)(?:<[^\>]+>)? *\{.*static let shared(?:: *\k<TYPE>)? *= *\k<TYPE>\(.*(?<= |\t|public|internal) init\('
    name: "Singleton Shared Private Init"
    message: "Singletons with a single object (`shared`) should declare their init method(s) as private."
    severity: warning
  singleton_shared_single_object:
    included: ".*.swift"
    regex: 'class +(?<TYPE>\w+)(?:<[^\>]+>)? *\{.*(?:static let shared(?:: *\k<TYPE>)? *= *\k<TYPE>\(.*static let \w+(?:: *\k<TYPE>)? *= *\k<TYPE>\(|static let \w+(?:: *\k<TYPE>)? *= *\k<TYPE>\(.*static let shared(?:: *\k<TYPE>)? *= *\k<TYPE>\()'
    name: "Singleton Shared Single Object"
    message: "Singletons with a `shared` object (real Singletons) should not have other static let properties. Use `default` instead (if needed)."
    severity: warning
  too_much_indentation:
    included: ".*.swift"
    regex: '\n {0}[^\s\/][^\n]*[^,|&]\n+ {5,}\S|\n {4}[^\s\/][^\n]*[^,|&]\n+ {9,}\S|\n {8}[^\s\/][^\n]*[^,|&]\n+ {13,}\S|\n {12}[^\s\/][^\n]*[^,|&]\n+ {17,}\S|\n {16}[^\s\/][^\n]*[^,|&]\n+ {21,}\S|\n {20}[^\s\/][^\n]*[^,|&]\n+ {25,}\S'
    name: "Too Much Indentation"
    message: "Don't indent code by more than 4 whitespaces."
    severity: warning
  too_much_unindentation:
    included: ".*.swift"
    regex: ' {28}[^\s\.](.|[^\n]*[^\)][^\ ][^\}])\n+ {0,23}[^\s\/]| {24}[^\s\.](.|[^\n]*[^\)][^\ ][^\}])\n+ {0,19}[^\s\/]| {20}[^\s\.](.|[^\n]*[^\)][^\ ][^\}])\n+ {0,15}[^\s\/]| {16}[^\s\.](.|[^\n]*[^\)][^\ ][^\}])\n+ {0,11}[^\s\/]| {12}[^\s\.](.|[^\n]*[^\)][^\ ][^\}])\n+ {0,7}[^\s\/]| {8}[^\s\.](.|[^\n]*[^\)][^\ ][^\}])\n+ {0,3}[^\s\/]'
    name: "Too Much Unindentation"
    message: "Don't unindent code by more than 4 whitespaces."
    severity: warning
  tuple_index:
    included: ".*.swift"
    regex: '(\$\d|\w*[^\d \(\[\{])\.\d'
    name: "Tuple Index"
    message: "Prevent unwraping tuples by their index – define a typealias with named components instead."
    severity: warning
  unnecessary_case_break:
    included: ".*.swift"
    regex: '(case |default)(?:[^\n\}]+\n){2,}\s*break *\n|\n *\n *break(?:\n *\n|\n *\})'
    name: "Unnecessary Case Break"
    message: "Don't use break in switch cases – Swift breaks by default."
    severity: warning
  unnecessary_nil_assignment:
    included: ".*.swift"
    regex: 'var \S+\s*:\s*[^\s]+\?\s*=\s*nil'
    name: "Unnecessary Nil Assignment"
    message: "Don't assign nil as a value when defining an optional type – it's nil by default."
    severity: warning
  view_controller_variable_naming:
    included: ".*.swift"
    regex: '(?:let|var) +\w*(?:vc|VC|Vc|viewC|viewController|ViewController) *='
    name: "View Controller Variable Naming"
    message: "Always name your view controller variables with the suffix `ViewCtrl`."
    severity: warning
  whitespace_around_range_operators:
    included: ".*.swift"
    regex: '\w\.\.[<\.]\w'
    name: "Whitespace around Range Operators"
    message: "A range operator should be surrounded by a single whitespace."
    severity: warning
  whitespace_comment_start:
    included: ".*.swift"
    regex: '[^:#\]\}\)][^:#\]\}\)]\/\/[^\s\/]'
    name: "Whitespace Comment Start"
    message: "A comment should always start with a whitespace."
    severity: warning
  print_statement:
    included: ".*.swift"
    regex: 'print\([^\n]+\)'
    name: "Print Statement"
    message: "Don't avoid using print statements."
    severity: warning
  get_in_functions:
    included: ".*.swift"
    regex: 'func get[^\s\(]+\([^\{\n]*\) \{$\n(?!^\s*$)'
    name: "Get Keyword"
    message: "Avoid using `get` keyword in function names"

